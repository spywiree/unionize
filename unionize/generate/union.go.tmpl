// Code generated by unionize; DO NOT EDIT.
package {{$.Package}}

import (
	"unsafe"
	{{- range $i := $.ImportsIter}}
	{{$i.Name}} "{{$i.Path}}"
	{{- end}}
)

{{if $.Tagged}}
type {{$.EnumName}} {{$.EnumType}}

const (
	{{- range $i, $m := $.Members}}
	{{$.EnumMemberName $m}} {{$.EnumName}} = {{$i}}
	{{- end}}
)

func (x {{$.EnumName}}) String() string {
	switch x {
	{{- range $m := $.Members}}
	case {{$.EnumMemberName $m}}:
		return "{{$m.Name}}"
	{{- end}}
	default:
		panic("unreachable")
	}
}

func (u *{{$.Name}}) Type() {{$.EnumName}} {
	return u.typ
}
{{end}}

type {{$.Name}} struct {
	{{- if $.Tagged}}
	typ {{$.EnumName}}
	{{- end}}
	data {{$.BufferType}}
}

{{range $m := $.Members}}
{{$typ := $m.TypeString $.Union}}
func (u *{{$.Name}}) {{$.GetterName $m}}() {{$typ}} {
	return *(*{{$typ}})(unsafe.Pointer(&u.data))
}
func (u *{{$.Name}}) {{$.SetterName $m}}(v {{$typ}}) {
	{{- if $.Tagged}}
	u.typ = {{$.EnumMemberName $m}}
	{{- end}}
	*(*{{$typ}})(unsafe.Pointer(&u.data)) = v
}
func (u *{{$.Name}}) {{$.PointerName $m}}() *{{$typ}} {
	return (*{{$typ}})(unsafe.Pointer(&u.data))
}
func (u *{{$.Name}}) {{$.OkName $m}}() ({{$typ}}, bool) {
	if u.Type() == {{$.EnumMemberName $m}} {
		return u.{{$.GetterName $m}}(), true
	}
	var zero {{$typ}}
	return zero, false
}
{{end}}

func (u *{{$.Name}}) Interface() any {
	switch u.Type() {
	{{- range $m := $.Members}}
	case {{$.EnumMemberName $m}}:
		return u.{{$.GetterName $m}}()
	{{- end}}
	default:
		panic("unreachable")
	}
}